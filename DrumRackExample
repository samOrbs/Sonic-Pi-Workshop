
#-- a pattern definition, to be used later...(ask me how it works if you really want to see me struggle)
define :pattern do |pattern|
  return pattern.ring.tick(:p1) == "x"
end


live_loop :midi do
  
  use_bpm :link # use the link bpm
  
  set_link_bpm! 160 # set the link bpm
  
  g = 1 # this is the sleep time, 1 is one beat per sleep
  
  #-- some sequences to populate
  a = (ring 0).tick(:a0)
  b = (ring 1).tick(:a1)
  c = (ring 2).tick(:a2)
  d = (ring 3).tick(:a3)
  
  #-- a retrigger sequence to populate
  retrigger = (knit 1,1).tick(:a4)
  
  #-- some empty offsets to use in our time_warp
  off = (ring 1).tick(:a5)
  off2 = (ring 1).tick(:a6)
  
  #-- our arrays to pass to the time_warp
  callarr = [0]
  callarr2 = [0]
  
  #-- a time_warp with a knit to sequence the arrays
  time_warp (knit callarr,3,callarr2,1).tick(:a7) do
    
    #-- the midi function that holds our sequencer, dont forget to set the channel, it can also become a sequence ;)
    midi :c2+(line 0,16,steps:16)[(ring a,b,c,d).stretch(retrigger).tick(:a8)],channel:1 if pattern "x"
    
  end
  
  sleep g
end
